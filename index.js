"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const crlf_normalize_1 = require("crlf-normalize");
const novel_segment_1 = require("novel-segment");
exports.stringify = novel_segment_1.stringify;
const bluebird = require("bluebird");
const fs = require("fs-extra");
const lib_1 = require("novel-segment/lib");
const cache_1 = require("./lib/cache");
const util_1 = require("./lib/util");
exports.enableDebug = util_1.enableDebug;
const PACKAGE_JSON = require("./package.json");
const util_2 = require("novel-segment/lib/util");
const iconv = require("iconv-jschardet");
let CACHED_SEGMENT;
let CACHED_CACACHE;
const DB_KEY = 'cache.db';
const DB_KEY_INFO = 'cache.info';
const DB_TTL = 3600 * 1000;
function textSegment(text, options) {
    return getSegment(options)
        .then(function (segment) {
        return segment.doSegment(text);
    })
        .tap(function (data) {
        return util_2.debug_token(data);
    });
}
exports.textSegment = textSegment;
function fileSegment(file, options) {
    return bluebird.resolve(readFile(file))
        .then(function (buf) {
        return textSegment(buf.toString(), options);
    });
}
exports.fileSegment = fileSegment;
function processText(text, options) {
    if (!text.length || !text.replace(/\s+/g, '').length) {
        return bluebird.resolve('');
    }
    return textSegment(text, options)
        .then(function (data) {
        let text = novel_segment_1.stringify(data);
        if (options) {
            if (options.crlf) {
                if (typeof options.crlf === 'string') {
                    text = crlf_normalize_1.default(text, options.crlf);
                }
                else {
                    text = crlf_normalize_1.default(text);
                }
            }
        }
        util_1.freeGC();
        return text;
    });
}
exports.processText = processText;
function processFile(file, options) {
    return bluebird.resolve(readFile(file, options))
        .then(function (buf) {
        return processText(buf.toString(), options);
    });
}
exports.processFile = processFile;
class SegmentCliError extends Error {
}
exports.SegmentCliError = SegmentCliError;
function readFile(file, options) {
    return new bluebird((resolve, reject) => {
        if (!fs.existsSync(file)) {
            let e = new SegmentCliError(`ENOENT: no such file or directory, open '${file}'`);
            reject(e);
        }
        else {
            fs.readFile(file).then(resolve);
        }
    })
        .tap(function (buf) {
        if (options && options.disableWarn) {
            return;
        }
        if (!buf.length) {
            util_1.console.warn(`此檔案無內容`, file);
        }
        else {
            let chk = iconv.detect(buf);
            if (chk.encoding != 'UTF-8' && chk.encoding != 'ascii') {
                util_1.console.warn('此檔案可能不是 UTF8 請檢查編碼或利用 MadEdit 等工具轉換', chk, file);
            }
        }
    });
}
exports.readFile = readFile;
function fixOptions(options) {
    options = options || {};
    if (typeof options.ttl !== 'number' || options.ttl < 1) {
        delete options.ttl;
    }
    return options;
}
exports.fixOptions = fixOptions;
function getCacache(options) {
    return new bluebird(function (resolve, reject) {
        if (!CACHED_CACACHE) {
            if (options && options.useGlobalCache) {
                CACHED_CACACHE = new cache_1.Cacache({
                    name: PACKAGE_JSON.name,
                    useGlobalCache: options.useGlobalCache,
                });
            }
            else {
                CACHED_CACACHE = new cache_1.Cacache(PACKAGE_JSON.name);
            }
        }
        resolve(CACHED_CACACHE);
    });
}
exports.getCacache = getCacache;
function resetSegment() {
    CACHED_SEGMENT = void 0;
}
exports.resetSegment = resetSegment;
function getSegment(options) {
    options = fixOptions(options);
    let { disableCache } = options;
    return bluebird
        .resolve()
        .then(async function () {
        await getCacache(options);
        if (!CACHED_SEGMENT) {
            CACHED_SEGMENT = new novel_segment_1.default({
                autoCjk: true,
                optionsDoSegment: {
                    convertSynonym: true,
                },
                all_mod: true,
            });
            let _options = {
                /**
                 * 開啟 all_mod 才會在自動載入時包含 ZhtSynonymOptimizer
                 */
                all_mod: true,
            };
            let _info = await loadCacheInfo(options);
            let version = {
                [PACKAGE_JSON.name]: PACKAGE_JSON.version,
                ...novel_segment_1.default.versions,
                [PACKAGE_JSON.name]: PACKAGE_JSON.version,
            };
            let cache_db = await loadCacheDb(options);
            let _do_init;
            if (disableCache) {
                _do_init = true;
            }
            if (typeof _do_init == 'undefined'
                && _info
                && _info.current
                && _info.current[PACKAGE_JSON.name]) {
                Object.keys(version)
                    .some(key => {
                    let bool = _info[key] != version[key];
                    if (bool) {
                        util_1.debugConsole.debug(`本次執行的版本與上次緩存的版本不同`);
                        _do_init = true;
                    }
                    return bool;
                });
            }
            if (typeof _do_init == 'undefined' && cache_db) {
                if (cache_db.DICT) {
                    util_1.debugConsole.debug(`載入緩存字典`);
                    lib_1.useDefault(CACHED_SEGMENT, {
                        ...options,
                        nodict: true,
                        all_mod: true,
                    });
                    CACHED_SEGMENT.DICT = cache_db.DICT;
                    CACHED_SEGMENT.inited = true;
                    _do_init = false;
                    //console.dir(CACHED_SEGMENT.modules);
                }
            }
            if (typeof _do_init == 'undefined' || _do_init) {
                util_1.debugConsole.debug(`重新載入分析字典`);
                CACHED_SEGMENT.autoInit(_options);
                _do_init = true;
            }
            else {
                CACHED_SEGMENT
                    .loadSynonymDict('synonym')
                    .loadSynonymDict('zht.synonym')
                    .loadBlacklistDict('blacklist')
                    .loadBlacklistOptimizerDict('blacklist.name');
                CACHED_SEGMENT.doBlacklist();
            }
            let db_dict = CACHED_SEGMENT.getDictDatabase('TABLE', true);
            db_dict.TABLE = CACHED_SEGMENT.DICT['TABLE'];
            db_dict.TABLE2 = CACHED_SEGMENT.DICT['TABLE2'];
            db_dict.options.autoCjk = true;
            //CACHED_SEGMENT.loadSynonymDict('synonym', true);
            let size_db_dict = db_dict.size();
            CACHED_SEGMENT.loadSynonymDict('synonym', true);
            let size_segment = Object.keys(CACHED_SEGMENT.getDict('SYNONYM')).length;
            util_1.debugConsole.debug('主字典總數', size_db_dict);
            util_1.debugConsole.debug('Synonym', size_segment);
            _info.last = Object.assign({}, _info.current);
            _info.current = {
                size_db_dict,
                size_segment,
                size_db_dict_diff: size_db_dict - (_info.last.size_db_dict || 0),
                size_segment_diff: size_segment - (_info.last.size_segment || 0),
                version,
            };
            util_1.debugConsole.debug(_info);
            if (!disableCache
                && (_do_init || !cache_db || !cache_db.DICT)) {
                await CACHED_CACACHE.writeJSON(DB_KEY, {
                    ..._info,
                    DICT: CACHED_SEGMENT.DICT,
                });
                util_1.debugConsole.debug(`緩存字典於 ${DB_KEY}`, CACHED_CACACHE.cachePath);
            }
            util_1.freeGC();
        }
        return CACHED_SEGMENT;
    });
}
exports.getSegment = getSegment;
function loadCacheInfo(options) {
    return bluebird
        .resolve()
        .then(async function () {
        await getCacache(options);
        let has_cache_db = await CACHED_CACACHE.hasData(DB_KEY_INFO);
        let data;
        if (has_cache_db) {
            data = await CACHED_CACACHE
                .readJSON(DB_KEY_INFO)
                .then(function (ret) {
                return ret.json;
            });
        }
        data = data || {};
        data.last = data.last || {};
        data.current = data.current || {};
        data.last.version = data.last.version || {};
        data.current.version = data.current.version || {};
        return data;
    });
}
exports.loadCacheInfo = loadCacheInfo;
function loadCacheDb(options) {
    options = fixOptions(options);
    let { disableCache } = options;
    if (disableCache) {
        return bluebird
            .resolve(null);
    }
    return bluebird
        .resolve()
        .then(async function () {
        await getCacache(options);
        let has_cache_db = await CACHED_CACACHE.hasData(DB_KEY, {
            ttl: options.ttl > 0 ? options.ttl : DB_TTL,
        });
        if (has_cache_db) {
            util_1.debugConsole.debug(`發現緩存 ${DB_KEY}`, has_cache_db.path);
            return CACHED_CACACHE
                .readJSON(DB_KEY)
                .then(function (ret) {
                return ret.json;
            });
        }
        return null;
    });
}
exports.loadCacheDb = loadCacheDb;
function removeCache(options) {
    return getCacache(fixOptions(options))
        .tap(async function (cache) {
        await cache.clearMemoized();
        await cache.removeAll();
    });
}
exports.removeCache = removeCache;
function resetCache() {
    CACHED_CACACHE = void 0;
}
exports.resetCache = resetCache;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLG1EQUFrQztBQUNsQyxpREFBbUQ7QUFpQjdCLG9CQWpCSix5QkFBUyxDQWlCSTtBQWhCL0IscUNBQXNDO0FBQ3RDLCtCQUErQjtBQUMvQiwyQ0FBK0M7QUFDL0MsdUNBQXNDO0FBQ3RDLHFDQUF5RjtBQVloRixzQkFad0Msa0JBQVcsQ0FZeEM7QUFYcEIsK0NBQWdEO0FBQ2hELGlEQUFvRDtBQUNwRCx5Q0FBeUM7QUFFekMsSUFBSSxjQUEyRCxDQUFDO0FBQ2hFLElBQUksY0FBdUIsQ0FBQztBQUU1QixNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUM7QUFDMUIsTUFBTSxXQUFXLEdBQUcsWUFBWSxDQUFDO0FBQ2pDLE1BQU0sTUFBTSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUM7QUFtQjNCLFNBQWdCLFdBQVcsQ0FBQyxJQUFZLEVBQUUsT0FBNEI7SUFFckUsT0FBTyxVQUFVLENBQUMsT0FBTyxDQUFDO1NBQ3hCLElBQUksQ0FBQyxVQUFVLE9BQU87UUFFdEIsT0FBTyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hDLENBQUMsQ0FBQztTQUNELEdBQUcsQ0FBQyxVQUFVLElBQUk7UUFFbEIsT0FBTyxrQkFBVyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ3pCLENBQUMsQ0FBQyxDQUNEO0FBQ0gsQ0FBQztBQVpELGtDQVlDO0FBRUQsU0FBZ0IsV0FBVyxDQUFDLElBQVksRUFBRSxPQUE0QjtJQUVyRSxPQUFPLFFBQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3JDLElBQUksQ0FBQyxVQUFVLEdBQUc7UUFFbEIsT0FBTyxXQUFXLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzdDLENBQUMsQ0FBQyxDQUNEO0FBQ0gsQ0FBQztBQVJE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ZSgnY2FjYWNoZScpO1xuaW1wb3J0IGNybGYgZnJvbSAnY3JsZi1ub3JtYWxpemUnO1xuaW1wb3J0IFNlZ21lbnQsIHsgc3RyaW5naWZ5IH0gZnJvbSAnbm92ZWwtc2VnbWVudCc7XG5pbXBvcnQgYmx1ZWJpcmQgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHsgdXNlRGVmYXVsdCB9IGZyb20gJ25vdmVsLXNlZ21lbnQvbGliJztcbmltcG9ydCB7IENhY2FjaGUgfSBmcm9tICcuL2xpYi9jYWNoZSc7XG5pbXBvcnQgeyBjb25zb2xlLCBkZWJ1Z0NvbnNvbGUsIGdldENhY2hlRGlyUGF0aCwgZW5hYmxlRGVidWcsIGZyZWVHQyB9IGZyb20gJy4vbGliL3V0aWwnO1xuaW1wb3J0IFBBQ0tBR0VfSlNPTiA9IHJlcXVpcmUoJy4vcGFja2FnZS5qc29uJyk7XG5pbXBvcnQgeyBkZWJ1Z190b2tlbiB9IGZyb20gJ25vdmVsLXNlZ21lbnQvbGliL3V0aWwnXG5pbXBvcnQgKiBhcyBpY29udiBmcm9tICdpY29udi1qc2NoYXJkZXQnO1xuXG5sZXQgQ0FDSEVEX1NFR01FTlQ6IGltcG9ydChcIm5vdmVsLXNlZ21lbnQvbGliL1NlZ21lbnRcIikuU2VnbWVudDtcbmxldCBDQUNIRURfQ0FDQUNIRTogQ2FjYWNoZTtcblxuY29uc3QgREJfS0VZID0gJ2NhY2hlLmRiJztcbmNvbnN0IERCX0tFWV9JTkZPID0gJ2NhY2hlLmluZm8nO1xuY29uc3QgREJfVFRMID0gMzYwMCAqIDEwMDA7XG5cbmV4cG9ydCB7IGVuYWJsZURlYnVnLCBzdHJpbmdpZnkgfVxuXG5leHBvcnQgaW50ZXJmYWNlIElTZWdtZW50Q0xJT3B0aW9uc1xue1xuXHQvKipcblx0ICog5qC85byP5YyW5YiG6KGM56ym6JmfXG5cdCAqL1xuXHRjcmxmPzogc3RyaW5nIHwgYm9vbGVhbixcblxuXHR1c2VHbG9iYWxDYWNoZT86IGJvb2xlYW4sXG5cdGRpc2FibGVDYWNoZT86IGJvb2xlYW4sXG5cblx0ZGlzYWJsZVdhcm4/OiBib29sZWFuLFxuXG5cdHR0bD86IG51bWJlcixcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRleHRTZWdtZW50KHRleHQ6IHN0cmluZywgb3B0aW9ucz86IElTZWdtZW50Q0xJT3B0aW9ucylcbntcblx0cmV0dXJuIGdldFNlZ21lbnQob3B0aW9ucylcblx0XHQudGhlbihmdW5jdGlvbiAoc2VnbWVudClcblx0XHR7XG5cdFx0XHRyZXR1cm4gc2VnbWVudC5kb1NlZ21lbnQodGV4dCk7XG5cdFx0fSlcblx0XHQudGFwKGZ1bmN0aW9uIChkYXRhKVxuXHRcdHtcblx0XHRcdHJldHVybiBkZWJ1Z190b2tlbihkYXRhKVxuXHRcdH0pXG5cdFx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmlsZVNlZ21lbnQoZmlsZTogc3RyaW5nLCBvcHRpb25zPzogSVNlZ21lbnRDTElPcHRpb25zKVxue1xuXHRyZXR1cm4gYmx1ZWJpcmQucmVzb2x2ZShyZWFkRmlsZShmaWxlKSlcblx0XHQudGhlbihmdW5jdGlvbiAoYnVmKVxuXHRcdHtcblx0XHRcdHJldHVybiB0ZXh0U2VnbWVudChidWYudG9TdHJpbmcoKSwgb3B0aW9ucyk7XG5cdFx0fSlcblx0XHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzVGV4dCh0ZXh0OiBzdHJpbmcsIG9wdGlvbnM/OiBJU2VnbWVudENMSU9wdGlvbnMpXG57XG5cdGlmICghdGV4dC5sZW5ndGggfHwgIXRleHQucmVwbGFjZSgvXFxzKy9nLCAnJykubGVuZ3RoKVxuXHR7XG5cdFx0cmV0dXJuIGJsdWViaXJkLnJlc29sdmUoJycpO1xuXHR9XG5cblx0cmV0dXJuIHRleHRTZWdtZW50KHRleHQsIG9wdGlvbnMpXG5cdFx0LnRoZW4oZnVuY3Rpb24gKGRhdGEpXG5cdFx0e1xuXHRcdFx0bGV0IHRleHQgPSBzdHJpbmdpZnkoZGF0YSk7XG5cdFx0XHRpZiAob3B0aW9ucylcblx0XHRcdHtcblx0XHRcdFx0aWYgKG9wdGlvbnMuY3JsZilcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGlmICh0eXBlb2Ygb3B0aW9ucy5jcmxmID09PSAnc3RyaW5nJylcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR0ZXh0ID0gY3JsZih0ZXh0LCBvcHRpb25zLmNybGYpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0dGV4dCA9IGNybGYodGV4dCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZyZWVHQygpO1xuXG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9KVxuXHRcdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NGaWxlKGZpbGU6IHN0cmluZywgb3B0aW9ucz86IElTZWdtZW50Q0xJT3B0aW9ucylcbntcblx0cmV0dXJuIGJsdWViaXJkLnJlc29sdmUocmVhZEZpbGUoZmlsZSwgb3B0aW9ucykpXG5cdFx0LnRoZW4oZnVuY3Rpb24gKGJ1Zilcblx0XHR7XG5cdFx0XHRyZXR1cm4gcHJvY2Vzc1RleHQoYnVmLnRvU3RyaW5nKCksIG9wdGlvbnMpO1xuXHRcdH0pXG5cdFx0O1xufVxuXG5leHBvcnQgY2xhc3MgU2VnbWVudENsaUVycm9yIGV4dGVuZHMgRXJyb3JcbntcblxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVhZEZpbGUoZmlsZTogc3RyaW5nLCBvcHRpb25zPzogSVNlZ21lbnRDTElPcHRpb25zKTogYmx1ZWJpcmQ8QnVmZmVyPlxue1xuXHRyZXR1cm4gbmV3IGJsdWViaXJkPEJ1ZmZlcj4oKHJlc29sdmUsIHJlamVjdCkgPT5cblx0e1xuXHRcdGlmICghZnMuZXhpc3RzU3luYyhmaWxlKSlcblx0XHR7XG5cdFx0XHRsZXQgZSA9IG5ldyBTZWdtZW50Q2xpRXJyb3IoYEVOT0VOVDogbm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeSwgb3BlbiAnJHtmaWxlfSdgKTtcblx0XHRcdHJlamVjdChlKVxuXHRcdH1cblx0XHRlbHNlXG5cdFx0e1xuXG5cdFx0XHRmcy5yZWFkRmlsZShmaWxlKS50aGVuKHJlc29sdmUpO1xuXHRcdH1cblx0fSlcblx0XHQudGFwKGZ1bmN0aW9uIChidWYpXG5cdFx0e1xuXHRcdFx0aWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5kaXNhYmxlV2Fybilcblx0XHRcdHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIWJ1Zi5sZW5ndGgpXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnNvbGUud2Fybihg5q2k5qqU5qGI54Sh5YWn5a65YCwgZmlsZSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdGxldCBjaGsgPSBpY29udi5kZXRlY3QoYnVmKTtcblxuXHRcdFx0XHRpZiAoY2hrLmVuY29kaW5nICE9ICdVVEYtOCcgJiYgY2hrLmVuY29kaW5nICE9ICdhc2NpaScpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oJ+atpOaqlOahiOWPr+iDveS4jeaYryBVVEY4IOiri+aqouafpee3qOeivOaIluWIqeeUqCBNYWRFZGl0IOetieW3peWFt+i9ieaPmycsIGNoaywgZmlsZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KVxuXHRcdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpeE9wdGlvbnMob3B0aW9ucz86IElTZWdtZW50Q0xJT3B0aW9ucyk6IElTZWdtZW50Q0xJT3B0aW9uc1xue1xuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRpZiAodHlwZW9mIG9wdGlvbnMudHRsICE9PSAnbnVtYmVyJyB8fCBvcHRpb25zLnR0bCA8IDEpXG5cdHtcblx0XHRkZWxldGUgb3B0aW9ucy50dGw7XG5cdH1cblxuXHRyZXR1cm4gb3B0aW9ucztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENhY2FjaGUob3B0aW9ucz86IElTZWdtZW50Q0xJT3B0aW9ucylcbntcblx0cmV0dXJuIG5ldyBibHVlYmlyZDxDYWNhY2hlPihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KVxuXHR7XG5cdFx0aWYgKCFDQUNIRURfQ0FDQUNIRSlcblx0XHR7XG5cdFx0XHRpZiAob3B0aW9ucyAmJiBvcHRpb25zLnVzZUdsb2JhbENhY2hlKVxuXHRcdFx0e1xuXHRcdFx0XHRDQUNIRURfQ0FDQUNIRSA9IG5ldyBDYWNhY2hlKHtcblx0XHRcdFx0XHRuYW1lOiBQQUNLQUdFX0pTT04ubmFtZSxcblx0XHRcdFx0XHR1c2VHbG9iYWxDYWNoZTogb3B0aW9ucy51c2VHbG9iYWxDYWNoZSxcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlXG5cdFx0XHR7XG5cdFx0XHRcdENBQ0hFRF9DQUNBQ0hFID0gbmV3IENhY2FjaGUoUEFDS0FHRV9KU09OLm5hbWUpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJlc29sdmUoQ0FDSEVEX0NBQ0FDSEUpXG5cdH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRTZWdtZW50KClcbntcblx0Q0FDSEVEX1NFR01FTlQgPSB2b2lkIDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTZWdtZW50KG9wdGlvbnM/OiBJU2VnbWVudENMSU9wdGlvbnMpXG57XG5cdG9wdGlvbnMgPSBmaXhPcHRpb25zKG9wdGlvbnMpO1xuXHRsZXQgeyBkaXNhYmxlQ2FjaGUgfSA9IG9wdGlvbnM7XG5cblx0cmV0dXJuIGJsdWViaXJkXG5cdFx0LnJlc29sdmUoKVxuXHRcdC50aGVuKGFzeW5jIGZ1bmN0aW9uICgpXG5cdFx0e1xuXHRcdFx0YXdhaXQgZ2V0Q2FjYWNoZShvcHRpb25zKTtcblxuXHRcdFx0aWYgKCFDQUNIRURfU0VHTUVOVClcblx0XHRcdHtcblx0XHRcdFx0Q0FDSEVEX1NFR01FTlQgPSBuZXcgU2VnbWVudCh7XG5cdFx0XHRcdFx0YXV0b0NqazogdHJ1ZSxcblxuXHRcdFx0XHRcdG9wdGlvbnNEb1NlZ21lbnQ6IHtcblxuXHRcdFx0XHRcdFx0Y29udmVydFN5bm9ueW06IHRydWUsXG5cblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0YWxsX21vZDogdHJ1ZSxcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0bGV0IF9vcHRpb25zID0ge1xuXHRcdFx0XHRcdC8qKlxuXHRcdFx0XHRcdCAqIOmWi+WVnyBhbGxfbW9kIOaJjeacg+WcqOiHquWLlei8ieWFpeaZguWMheWQqyBaaHRTeW5vbnltT3B0aW1pemVyXG5cdFx0XHRcdFx0ICovXG5cdFx0XHRcdFx0YWxsX21vZDogdHJ1ZSxcblx0XHRcdFx0fTtcblxuXHRcdFx0XHRsZXQgX2luZm8gPSBhd2FpdCBsb2FkQ2FjaGVJbmZvKG9wdGlvbnMpO1xuXG5cdFx0XHRcdGxldCB2ZXJzaW9uID0ge1xuXHRcdFx0XHRcdFtQQUNLQUdFX0pTT04ubmFtZV06IFBBQ0tBR0VfSlNPTi52ZXJzaW9uLFxuXHRcdFx0XHRcdC4uLlNlZ21lbnQudmVyc2lvbnMsXG5cdFx0XHRcdFx0W1BBQ0tBR0VfSlNPTi5uYW1lXTogUEFDS0FHRV9KU09OLnZlcnNpb24sXG5cdFx0XHRcdH07XG5cblx0XHRcdFx0bGV0IGNhY2hlX2RiID0gYXdhaXQgbG9hZENhY2hlRGIob3B0aW9ucyk7XG5cblx0XHRcdFx0bGV0IF9kb19pbml0OiBib29sZWFuO1xuXG5cdFx0XHRcdGlmIChkaXNhYmxlQ2FjaGUpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRfZG9faW5pdCA9IHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAodHlwZW9mIF9kb19pbml0ID09ICd1bmRlZmluZWQnXG5cdFx0XHRcdFx0JiYgX2luZm9cblx0XHRcdFx0XHQmJiBfaW5mby5jdXJyZW50XG5cdFx0XHRcdFx0JiYgX2luZm8uY3VycmVudFtQQUNLQUdFX0pTT04ubmFtZV1cblx0XHRcdFx0KVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0T2JqZWN0LmtleXModmVyc2lvbilcblx0XHRcdFx0XHRcdC5zb21lKGtleSA9PlxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRsZXQgYm9vbCA9IF9pbmZvW2tleV0gIT0gdmVyc2lvbltrZXldO1xuXG5cdFx0XHRcdFx0XHRcdGlmIChib29sKVxuXHRcdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdFx0ZGVidWdDb25zb2xlLmRlYnVnKGDmnKzmrKHln7fooYznmoTniYjmnKzoiIfkuIrmrKHnt6nlrZjnmoTniYjmnKzkuI3lkIxgKTtcblx0XHRcdFx0XHRcdFx0XHRfZG9faW5pdCA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gYm9vbDtcblx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHR5cGVvZiBfZG9faW5pdCA9PSAndW5kZWZpbmVkJyAmJiBjYWNoZV9kYilcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGlmIChjYWNoZV9kYi5ESUNUKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGRlYnVnQ29uc29sZS5kZWJ1Zyhg6LyJ5YWl57ep5a2Y5a2X5YW4YCk7XG5cblx0XHRcdFx0XHRcdHVzZURlZmF1bHQoQ0FDSEVEX1NFR01FTlQsIHtcblx0XHRcdFx0XHRcdFx0Li4ub3B0aW9ucyxcblx0XHRcdFx0XHRcdFx0bm9kaWN0OiB0cnVlLFxuXHRcdFx0XHRcdFx0XHRhbGxfbW9kOiB0cnVlLFxuXHRcdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHRcdENBQ0hFRF9TRUdNRU5ULkRJQ1QgPSBjYWNoZV9kYi5ESUNUO1xuXG5cdFx0XHRcdFx0XHRDQUNIRURfU0VHTUVOVC5pbml0ZWQgPSB0cnVlO1xuXG5cdFx0XHRcdFx0XHRfZG9faW5pdCA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0XHQvL2NvbnNvbGUuZGlyKENBQ0hFRF9TRUdNRU5ULm1vZHVsZXMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICh0eXBlb2YgX2RvX2luaXQgPT0gJ3VuZGVmaW5lZCcgfHwgX2RvX2luaXQpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRkZWJ1Z0NvbnNvbGUuZGVidWcoYOmHjeaWsOi8ieWFpeWIhuaekOWtl+WFuGApO1xuXG5cdFx0XHRcdFx0Q0FDSEVEX1NFR01FTlQuYXV0b0luaXQoX29wdGlvbnMpO1xuXG5cdFx0XHRcdFx0X2RvX2luaXQgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Vcblx0XHRcdFx0e1xuXHRcdFx0XHRcdENBQ0hFRF9TRUdNRU5UXG5cdFx0XHRcdFx0XHQubG9hZFN5bm9ueW1EaWN0KCdzeW5vbnltJylcblx0XHRcdFx0XHRcdC5sb2FkU3lub255bURpY3QoJ3podC5zeW5vbnltJylcblxuXHRcdFx0XHRcdFx0LmxvYWRCbGFja2xpc3REaWN0KCdibGFja2xpc3QnKVxuXHRcdFx0XHRcdFx0LmxvYWRCbGFja2xpc3RPcHRpbWl6ZXJEaWN0KCdibGFja2xpc3QubmFtZScpXG5cdFx0XHRcdFx0O1xuXG5cdFx0XHRcdFx0Q0FDSEVEX1NFR01FTlQuZG9CbGFja2xpc3QoKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGxldCBkYl9kaWN0ID0gQ0FDSEVEX1NFR01FTlQuZ2V0RGljdERhdGFiYXNlKCdUQUJMRScsIHRydWUpO1xuXHRcdFx0XHRkYl9kaWN0LlRBQkxFID0gQ0FDSEVEX1NFR01FTlQuRElDVFsnVEFCTEUnXTtcblx0XHRcdFx0ZGJfZGljdC5UQUJMRTIgPSBDQUNIRURfU0VHTUVOVC5ESUNUWydUQUJMRTInXTtcblxuXHRcdFx0XHRkYl9kaWN0Lm9wdGlvbnMuYXV0b0NqayA9IHRydWU7XG5cblx0XHRcdFx0Ly9DQUNIRURfU0VHTUVOVC5sb2FkU3lub255bURpY3QoJ3N5bm9ueW0nLCB0cnVlKTtcblxuXHRcdFx0XHRsZXQgc2l6ZV9kYl9kaWN0ID0gZGJfZGljdC5zaXplKCk7XG5cblx0XHRcdFx0Q0FDSEVEX1NFR01FTlQubG9hZFN5bm9ueW1EaWN0KCdzeW5vbnltJywgdHJ1ZSk7XG5cblx0XHRcdFx0bGV0IHNpemVfc2VnbWVudCA9IE9iamVjdC5rZXlzKENBQ0hFRF9TRUdNRU5ULmdldERpY3QoJ1NZTk9OWU0nKSkubGVuZ3RoO1xuXG5cdFx0XHRcdGRlYnVnQ29uc29sZS5kZWJ1Zygn5Li75a2X5YW457i95pW4Jywgc2l6ZV9kYl9kaWN0KTtcblx0XHRcdFx0ZGVidWdDb25zb2xlLmRlYnVnKCdTeW5vbnltJywgc2l6ZV9zZWdtZW50KTtcblxuXHRcdFx0XHRfaW5mby5sYXN0ID0gT2JqZWN0LmFzc2lnbih7fSwgX2luZm8uY3VycmVudCk7XG5cblx0XHRcdFx0X2luZm8uY3VycmVudCA9IHtcblx0XHRcdFx0XHRzaXplX2RiX2RpY3QsXG5cdFx0XHRcdFx0c2l6ZV9zZWdtZW50LFxuXHRcdFx0XHRcdHNpemVfZGJfZGljdF9kaWZmOiBzaXplX2RiX2RpY3QgLSAoX2luZm8ubGFzdC5zaXplX2RiX2RpY3QgfHwgMCksXG5cdFx0XHRcdFx0c2l6ZV9zZWdtZW50X2RpZmY6IHNpemVfc2VnbWVudCAtIChfaW5mby5sYXN0LnNpemVfc2VnbWVudCB8fCAwKSxcblxuXHRcdFx0XHRcdHZlcnNpb24sXG5cdFx0XHRcdH07XG5cblx0XHRcdFx0ZGVidWdDb25zb2xlLmRlYnVnKF9pbmZvKTtcblxuXHRcdFx0XHRpZiAoIWRpc2FibGVDYWNoZVxuXHRcdFx0XHRcdCYmIChfZG9faW5pdCB8fCAhY2FjaGVfZGIgfHwgIWNhY2hlX2RiLkRJQ1QpXG5cdFx0XHRcdClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGF3YWl0IENBQ0hFRF9DQUNBQ0hFLndyaXRlSlNPTihEQl9LRVksIHtcblxuXHRcdFx0XHRcdFx0Li4uX2luZm8sXG5cblx0XHRcdFx0XHRcdERJQ1Q6IENBQ0hFRF9TRUdNRU5ULkRJQ1QsXG5cdFx0XHRcdFx0fSBhcyBJRGF0YUNhY2hlKTtcblxuXHRcdFx0XHRcdGRlYnVnQ29uc29sZS5kZWJ1Zyhg57ep5a2Y5a2X5YW45pa8ICR7REJfS0VZfWAsIENBQ0hFRF9DQUNBQ0hFLmNhY2hlUGF0aCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmcmVlR0MoKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIENBQ0hFRF9TRUdNRU5UO1xuXHRcdH0pXG5cdFx0O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElEYXRhQ2FjaGVJbmZvXG57XG5cdHNpemVfZGJfZGljdD86IG51bWJlcixcblx0c2l6ZV9zZWdtZW50PzogbnVtYmVyLFxuXHRzaXplX2RiX2RpY3RfZGlmZj86IG51bWJlcixcblx0c2l6ZV9zZWdtZW50X2RpZmY/OiBudW1iZXIsXG5cblx0dmVyc2lvbj86IHtcblx0XHQnbm92ZWwtc2VnbWVudC1jbGknPzogc3RyaW5nLFxuXHRcdCdub3ZlbC1zZWdtZW50Jz86IHN0cmluZyxcblx0XHQnc2VnbWVudC1kaWN0Jz86IHN0cmluZyxcblx0fSxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRGF0YUNhY2hlXG57XG5cdGxhc3Q/OiBJRGF0YUNhY2hlSW5mbyxcblx0Y3VycmVudD86IElEYXRhQ2FjaGVJbmZvLFxuXHRESUNUPzogYW55LFxufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9hZENhY2hlSW5mbyhvcHRpb25zPzogSVNlZ21lbnRDTElPcHRpb25zKVxue1xuXHRyZXR1cm4gYmx1ZWJpcmRcblx0XHQucmVzb2x2ZSgpXG5cdFx0LnRoZW4oYXN5bmMgZnVuY3Rpb24gKClcblx0XHR7XG5cdFx0XHRhd2FpdCBnZXRDYWNhY2hlKG9wdGlvbnMpO1xuXG5cdFx0XHRsZXQgaGFzX2NhY2hlX2RiID0gYXdhaXQgQ0FDSEVEX0NBQ0FDSEUuaGFzRGF0YShEQl9LRVlfSU5GTyk7XG5cblx0XHRcdGxldCBkYXRhOiBJRGF0YUNhY2hlO1xuXG5cdFx0XHRpZiAoaGFzX2NhY2hlX2RiKVxuXHRcdFx0e1xuXHRcdFx0XHRkYXRhID0gYXdhaXQgQ0FDSEVEX0NBQ0FDSEVcblx0XHRcdFx0XHQucmVhZEpTT048SURhdGFDYWNoZT4oREJfS0VZX0lORk8pXG5cdFx0XHRcdFx0LnRoZW4oZnVuY3Rpb24gKHJldClcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmV0Lmpzb247XG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0O1xuXHRcdFx0fVxuXG5cdFx0XHRkYXRhID0gZGF0YSB8fCB7fTtcblxuXHRcdFx0ZGF0YS5sYXN0ID0gZGF0YS5sYXN0IHx8IHt9O1xuXHRcdFx0ZGF0YS5jdXJyZW50ID0gZGF0YS5jdXJyZW50IHx8IHt9O1xuXHRcdFx0ZGF0YS5sYXN0LnZlcnNpb24gPSBkYXRhLmxhc3QudmVyc2lvbiB8fCB7fTtcblx0XHRcdGRhdGEuY3VycmVudC52ZXJzaW9uID0gZGF0YS5jdXJyZW50LnZlcnNpb24gfHwge307XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH0pXG5cdFx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9hZENhY2hlRGIob3B0aW9ucz86IElTZWdtZW50Q0xJT3B0aW9ucyk6IGJsdWViaXJkPElEYXRhQ2FjaGU+XG57XG5cdG9wdGlvbnMgPSBmaXhPcHRpb25zKG9wdGlvbnMpO1xuXHRsZXQgeyBkaXNhYmxlQ2FjaGUgfSA9IG9wdGlvbnM7XG5cblx0aWYgKGRpc2FibGVDYWNoZSlcblx0e1xuXHRcdHJldHVybiBibHVlYmlyZFxuXHRcdFx0LnJlc29sdmUobnVsbClcblx0XHRcdDtcblx0fVxuXG5cdHJldHVybiBibHVlYmlyZFxuXHRcdC5yZXNvbHZlKClcblx0XHQudGhlbihhc3luYyBmdW5jdGlvbiAoKVxuXHRcdHtcblx0XHRcdGF3YWl0IGdldENhY2FjaGUob3B0aW9ucyk7XG5cblx0XHRcdGxldCBoYXNfY2FjaGVfZGIgPSBhd2FpdCBDQUNIRURfQ0FDQUNIRS5oYXNEYXRhKERCX0tFWSwge1xuXHRcdFx0XHR0dGw6IG9wdGlvbnMudHRsID4gMCA/IG9wdGlvbnMudHRsIDogREJfVFRMLFxuXHRcdFx0fSk7XG5cblx0XHRcdGlmIChoYXNfY2FjaGVfZGIpXG5cdFx0XHR7XG5cdFx0XHRcdGRlYnVnQ29uc29sZS5kZWJ1Zyhg55m854++57ep5a2YICR7REJfS0VZfWAsIGhhc19jYWNoZV9kYi5wYXRoKTtcblxuXHRcdFx0XHRyZXR1cm4gQ0FDSEVEX0NBQ0FDSEVcblx0XHRcdFx0XHQucmVhZEpTT048SURhdGFDYWNoZT4oREJfS0VZKVxuXHRcdFx0XHRcdC50aGVuKGZ1bmN0aW9uIChyZXQpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJldC5qc29uO1xuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9KVxuXHRcdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUNhY2hlKG9wdGlvbnM/OiBJU2VnbWVudENMSU9wdGlvbnMpXG57XG5cdHJldHVybiBnZXRDYWNhY2hlKGZpeE9wdGlvbnMob3B0aW9ucykpXG5cdFx0LnRhcChhc3luYyBmdW5jdGlvbiAoY2FjaGUpXG5cdFx0e1xuXHRcdFx0YXdhaXQgY2FjaGUuY2xlYXJNZW1vaXplZCgpO1xuXHRcdFx0YXdhaXQgY2FjaGUucmVtb3ZlQWxsKCk7XG5cdFx0fSlcblx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRDYWNoZSgpXG57XG5cdENBQ0hFRF9DQUNBQ0hFID0gdm9pZCAwXG59XG4iXX0=